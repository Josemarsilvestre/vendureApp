{"version":3,"names":["reportFatalErrorOnJS","NativeReanimatedModule","isChromeDebugger","isJest","runOnJS","setupMicrotasks","callMicrotasks","runOnUIImmediately","callGuardDEV","fn","_len","arguments","length","args","Array","_key","e","global","__ErrorUtils","reportFatalError","valueUnpacker","objectToUnpack","category","workletsCache","__workletsCache","handleCache","__handleCache","undefined","Map","WeakMap","workletHash","__workletHash","workletFun","get","initData","__initData","evalWithSourceMap","code","location","sourceMap","evalWithSourceUrl","eval","set","functionInstance","bind","_recur","__init","value","fun","Error","__remoteFunction","setupRequestAnimationFrame","nativeRequestAnimationFrame","requestAnimationFrame","animationFrameCallbacks","lastNativeAnimationFrameTimestamp","__flushAnimationFrame","frameTimestamp","currentCallbacks","forEach","f","callback","push","timestamp","__frameTimestamp","initializeUIRuntime","installCoreFunctions","IS_JEST","IS_CHROME_DEBUGGER","setTimeout","performance","now","capturableConsole","console","error","message","stack","assert","debug","log","warn","info"],"sources":["initializers.ts"],"sourcesContent":["import { reportFatalErrorOnJS } from './errors';\nimport NativeReanimatedModule from './NativeReanimated';\nimport { isChromeDebugger, isJest } from './PlatformChecker';\nimport {\n  runOnJS,\n  setupMicrotasks,\n  callMicrotasks,\n  runOnUIImmediately,\n} from './threads';\n\n// callGuard is only used with debug builds\nfunction callGuardDEV<T extends Array<any>, U>(\n  fn: (...args: T) => U,\n  ...args: T\n): void {\n  'worklet';\n  try {\n    fn(...args);\n  } catch (e) {\n    if (global.__ErrorUtils) {\n      global.__ErrorUtils.reportFatalError(e as Error);\n    } else {\n      throw e;\n    }\n  }\n}\n\nfunction valueUnpacker(objectToUnpack: any, category?: string): any {\n  'worklet';\n  let workletsCache = global.__workletsCache;\n  let handleCache = global.__handleCache;\n  if (workletsCache === undefined) {\n    // init\n    workletsCache = global.__workletsCache = new Map();\n    handleCache = global.__handleCache = new WeakMap();\n  }\n  const workletHash = objectToUnpack.__workletHash;\n  if (workletHash !== undefined) {\n    let workletFun = workletsCache.get(workletHash);\n    if (workletFun === undefined) {\n      const initData = objectToUnpack.__initData;\n      if (global.evalWithSourceMap) {\n        // if the runtime (hermes only for now) supports loading source maps\n        // we want to use the proper filename for the location as it guarantees\n        // that debugger understands and loads the source code of the file where\n        // the worklet is defined.\n        workletFun = global.evalWithSourceMap(\n          '(' + initData.code + '\\n)',\n          initData.location,\n          initData.sourceMap\n        ) as (...args: any[]) => any;\n      } else if (global.evalWithSourceUrl) {\n        // if the runtime doesn't support loading source maps, in dev mode we\n        // can pass source url when evaluating the worklet. Now, instead of using\n        // the actual file location we use worklet hash, as it the allows us to\n        // properly symbolicate traces (see errors.ts for details)\n        workletFun = global.evalWithSourceUrl(\n          '(' + initData.code + '\\n)',\n          `worklet_${workletHash}`\n        ) as (...args: any[]) => any;\n      } else {\n        // in release we use the regular eval to save on JSI calls\n        // eslint-disable-next-line no-eval\n        workletFun = eval('(' + initData.code + '\\n)') as (\n          ...args: any[]\n        ) => any;\n      }\n      workletsCache.set(workletHash, workletFun);\n    }\n    const functionInstance = workletFun.bind(objectToUnpack);\n    objectToUnpack._recur = functionInstance;\n    return functionInstance;\n  } else if (objectToUnpack.__init) {\n    let value = handleCache!.get(objectToUnpack);\n    if (value === undefined) {\n      value = objectToUnpack.__init();\n      handleCache!.set(objectToUnpack, value);\n    }\n    return value;\n  } else if (category === 'RemoteFunction') {\n    const fun = () => {\n      throw new Error(`Tried to synchronously call a non-worklet function on the UI thread.\n\nPossible solutions are:\n  a) If you want to synchronously execute this method, mark it as a worklet\n  b) If you want to execute this function on the JS thread, wrap it using \\`runOnJS\\``);\n    };\n    fun.__remoteFunction = objectToUnpack;\n    return fun;\n  } else {\n    throw new Error('data type not recognized by unpack method');\n  }\n}\n\nfunction setupRequestAnimationFrame() {\n  'worklet';\n\n  // Jest mocks requestAnimationFrame API and it does not like if that mock gets overridden\n  // so we avoid doing requestAnimationFrame batching in Jest environment.\n  const nativeRequestAnimationFrame = global.requestAnimationFrame;\n\n  let animationFrameCallbacks: Array<(timestamp: number) => void> = [];\n  let lastNativeAnimationFrameTimestamp = -1;\n\n  global.__flushAnimationFrame = (frameTimestamp: number) => {\n    const currentCallbacks = animationFrameCallbacks;\n    animationFrameCallbacks = [];\n    currentCallbacks.forEach((f) => f(frameTimestamp));\n    callMicrotasks();\n  };\n\n  global.requestAnimationFrame = (\n    callback: (timestamp: number) => void\n  ): number => {\n    animationFrameCallbacks.push(callback);\n    if (animationFrameCallbacks.length === 1) {\n      // We schedule native requestAnimationFrame only when the first callback\n      // is added and then use it to execute all the enqueued callbacks. Once\n      // the callbacks are run, we clear the array.\n      nativeRequestAnimationFrame((timestamp) => {\n        if (lastNativeAnimationFrameTimestamp >= timestamp) {\n          // Make sure we only execute the callbacks once for a given frame\n          return;\n        }\n        lastNativeAnimationFrameTimestamp = timestamp;\n        global.__frameTimestamp = timestamp;\n        global.__flushAnimationFrame(timestamp);\n        global.__frameTimestamp = undefined;\n      });\n    }\n    // Reanimated currently does not support cancelling callbacks requested with\n    // requestAnimationFrame. We return -1 as identifier which isn't in line\n    // with the spec but it should give users better clue in case they actually\n    // attempt to store the value returned from rAF and use it for cancelling.\n    return -1;\n  };\n}\n\nexport function initializeUIRuntime() {\n  NativeReanimatedModule.installCoreFunctions(callGuardDEV, valueUnpacker);\n\n  const IS_JEST = isJest();\n  const IS_CHROME_DEBUGGER = isChromeDebugger();\n\n  if (IS_JEST) {\n    // requestAnimationFrame react-native jest's setup is incorrect as it polyfills\n    // the method directly using setTimeout, therefore the callback doesn't get the\n    // expected timestamp as the only argument: https://github.com/facebook/react-native/blob/main/jest/setup.js#L28\n    // We override this setup here to make sure that callbacks get the proper timestamps\n    // when executed. For non-jest environments we define requestAnimationFrame in setupRequestAnimationFrame\n    // @ts-ignore TypeScript uses Node definition for rAF, setTimeout, etc which returns a Timeout object rather than a number\n    global.requestAnimationFrame = (callback: (timestamp: number) => void) => {\n      return setTimeout(() => callback(performance.now()), 0);\n    };\n  }\n\n  // We really have to create a copy of console here. Function runOnJS we use on elements inside\n  // this object makes it not configurable\n  const capturableConsole = { ...console };\n  runOnUIImmediately(() => {\n    'worklet';\n    // setup error handler\n    global.__ErrorUtils = {\n      reportFatalError: (error: Error) => {\n        runOnJS(reportFatalErrorOnJS)({\n          message: error.message,\n          stack: error.stack,\n        });\n      },\n    };\n\n    if (!IS_CHROME_DEBUGGER) {\n      // setup console\n      // @ts-ignore TypeScript doesn't like that there are missing methods in console object, but we don't provide all the methods for the UI runtime console version\n      global.console = {\n        assert: runOnJS(capturableConsole.assert),\n        debug: runOnJS(capturableConsole.debug),\n        log: runOnJS(capturableConsole.log),\n        warn: runOnJS(capturableConsole.warn),\n        error: runOnJS(capturableConsole.error),\n        info: runOnJS(capturableConsole.info),\n      };\n    }\n\n    if (!IS_JEST) {\n      setupMicrotasks();\n      setupRequestAnimationFrame();\n    }\n  })();\n}\n"],"mappings":"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"}