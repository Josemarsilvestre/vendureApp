{"version":3,"names":["MapperRegistry","constructor","module","_defineProperty","Map","_module","startMapper","mapper","mappers","set","id","updatedSinceLastExecute","stopMapper","delete","execute","updateOrder","i","len","sortedMappers","length","dirty","nodes","values","map","Node","mappersById","forEach","nodesLen","node","outputs","j","restNode","inputs","outi","outputsLen","resti","restLen","_id","children","push","post","postCounter","dfs","index","indexOf","splice","postArray","Object","keys","key","num","parseInt","sort","a","b","needRunOnRender","arguments","undefined"],"sources":["MapperRegistry.ts"],"sourcesContent":["import { JSReanimated } from './commonTypes';\nimport Mapper from './Mapper';\n\nexport default class MapperRegistry<T> {\n  sortedMappers: Mapper<T>[] = [];\n  mappers: Map<number, Mapper<T>> = new Map();\n  _module: JSReanimated;\n\n  updatedSinceLastExecute = false;\n\n  constructor(module: JSReanimated) {\n    this._module = module;\n  }\n\n  startMapper(mapper: Mapper<T>): number {\n    this.mappers.set(mapper.id, mapper);\n    this.updatedSinceLastExecute = true;\n    return mapper.id;\n  }\n\n  stopMapper(id: number): void {\n    this.mappers.delete(id);\n    this.updatedSinceLastExecute = true;\n  }\n\n  execute(): void {\n    if (this.updatedSinceLastExecute) {\n      this.updateOrder();\n      this.updatedSinceLastExecute = false;\n    }\n\n    for (let i = 0, len = this.sortedMappers.length; i < len; ++i) {\n      const mapper = this.sortedMappers[i];\n      if (mapper.dirty) {\n        mapper.execute();\n      }\n    }\n  }\n\n  updateOrder(): void {\n    const nodes = [...this.mappers.values()].map((mapper) => new Node(mapper));\n\n    const mappersById: Record<number, Mapper<T>> = {};\n    this.mappers.forEach((mapper) => {\n      mappersById[mapper.id] = mapper;\n    });\n\n    // create a graph from array of nodes\n    for (let i = 0, nodesLen = nodes.length; i < nodesLen; ++i) {\n      const node = nodes[i];\n      if (node.mapper.outputs.length === 0) {\n        continue;\n      }\n      for (let j = 0; j < nodesLen; ++j) {\n        const restNode = nodes[j];\n        if (i === j || restNode.mapper.inputs.length === 0) {\n          continue;\n        }\n        for (\n          let outi = 0, outputsLen = node.mapper.outputs.length;\n          outi < outputsLen;\n          ++outi\n        ) {\n          for (\n            let resti = 0, restLen = restNode.mapper.inputs.length;\n            resti < restLen;\n            ++resti\n          ) {\n            if (\n              node.mapper.outputs[outi]._id ===\n              restNode.mapper.inputs[resti]._id\n            ) {\n              node.children.push(restNode);\n            }\n          }\n        }\n      }\n    }\n\n    const post: Record<number, number> = {};\n    let postCounter = 1;\n    const dfs = (node: Node<T>) => {\n      const index = nodes.indexOf(node);\n      if (index === -1) {\n        // this node has already been handled\n        return;\n      }\n      ++postCounter;\n      nodes.splice(index, 1);\n      if (node.children.length === 0 && nodes.length > 0) {\n        post[node.mapper.id] = postCounter++;\n        dfs(nodes[0]);\n        return;\n      }\n      for (let i = 0, len = node.children.length; i < len; ++i) {\n        dfs(node.children[i]);\n      }\n      post[node.mapper.id] = postCounter++;\n    };\n\n    while (nodes.length) dfs(nodes[0]);\n\n    const postArray = Object.keys(post).map((key) => {\n      const num = parseInt(key);\n      return [num, post[num]];\n    });\n    postArray.sort((a, b) => {\n      return b[1] - a[1];\n    });\n\n    // clear sorted mappers\n    this.sortedMappers = [];\n\n    for (let i = 0, len = postArray.length; i < len; ++i) {\n      const [id] = postArray[i];\n      this.sortedMappers.push(mappersById[id]);\n    }\n  }\n\n  get needRunOnRender(): boolean {\n    return this.updatedSinceLastExecute;\n  }\n}\n\nclass Node<T> {\n  mapper: Mapper<T>;\n  children: Node<T>[];\n\n  constructor(mapper: Mapper<T>, children = []) {\n    this.mapper = mapper;\n    this.children = children;\n  }\n}\n"],"mappings":"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"}