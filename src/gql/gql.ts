/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  mutation Login($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      ... on CurrentUser {\n        id\n        identifier\n        channels {\n          token\n        }\n      }\n      ... on InvalidCredentialsError {\n        errorCode\n        message\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n      ... on ErrorResult {\n        errorCode\n        message\n      }\n    }\n  }\n": types.LoginDocument,
    "\n  mutation Register(\n    $emailAddress: String!\n    $firstName: String!\n    $lastName: String!\n    $password: String!\n  ) {\n    registerCustomerAccount(\n      input: {\n        emailAddress: $emailAddress\n        firstName: $firstName\n        lastName: $lastName\n        password: $password\n      }\n    ) {\n      ... on Success {\n        success\n      }\n      ... on MissingPasswordError {\n        errorCode\n        message\n      }\n      ... on PasswordValidationError {\n        errorCode\n        message\n        validationErrorMessage\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n": types.RegisterDocument,
    "\nmutation VerifyCustomer($token: String!, $password: String) {\n  verifyCustomerAccount(token: $token, password: $password) {\n    ... on CurrentUser {\n      id\n      identifier\n      channels {\n        token\n      }\n    }\n    ... on VerificationTokenInvalidError {\n      errorCode\n      message\n    }\n    ... on VerificationTokenExpiredError {\n      errorCode\n      message\n    }\n    ... on MissingPasswordError {\n      errorCode\n      message\n    }\n    ... on PasswordValidationError {\n      errorCode\n      message\n    }\n    ... on PasswordAlreadySetError {\n      errorCode\n      message\n    }\n    ... on NativeAuthStrategyError {\n      errorCode\n      message\n    }\n  }\n}\n": types.VerifyCustomerDocument,
    "\n  mutation ConvidadoOuLoginSuccess($id_: ID!, $quantity_: Int!) {\n    addItemToOrder(productVariantId: $id_, quantity: $quantity_) {\n      ... on Order {\n        id\n      }\n      ... on OrderModificationError {\n        errorCode\n        message\n      }\n      ... on OrderLimitError {\n        errorCode\n        message\n      }\n      ... on NegativeQuantityError {\n        errorCode\n        message\n      }\n      ... on InsufficientStockError {\n        errorCode\n        message\n      }\n    }\n  }\n": types.ConvidadoOuLoginSuccessDocument,
    "\n  query Order {\n    activeOrder {\n      total\n      totalWithTax\n      taxSummary {\n        description\n        taxRate\n        taxBase\n        taxTotal\n      }\n      lines {\n        id\n        featuredAsset {\n          source\n        }\n        productVariant {\n          name\n          priceWithTax\n        }\n        proratedUnitPriceWithTax\n        discounts {\n          amountWithTax\n        }\n        unitPrice\n        quantity\n      }\n    }\n  }\n": types.OrderDocument,
    "\n  mutation REMOVE_ORDER($id_: ID!) {\n    removeOrderLine(orderLineId: $id_) {\n      ... on Order {\n        id\n      }\n      ... on OrderModificationError {\n        errorCode\n        message\n      }\n    }\n  }\n": types.Remove_OrderDocument,
    "\n  mutation ADJUST_ORDER($id_: ID!, $quantity_: Int!) {\n    adjustOrderLine(orderLineId: $id_, quantity: $quantity_) {\n      ... on Order {\n        id\n      }\n      ... on OrderModificationError {\n        errorCode\n        message\n      }\n      ... on OrderLimitError {\n        errorCode\n        message\n      }\n      ... on NegativeQuantityError {\n        errorCode\n        message\n      }\n      ... on InsufficientStockError {\n        errorCode\n        message\n      }\n    }\n  }\n": types.Adjust_OrderDocument,
    "\n  mutation REMOVE_ALL_ORDER {\n    removeAllOrderLines {\n      ... on Order {\n        id\n      }\n      ... on OrderModificationError {\n        errorCode\n        message\n      }\n    }\n  }\n": types.Remove_All_OrderDocument,
    "\n  query GetAllCollections {\n    collections(options: { take: 9 }) {\n      items {\n        id\n        name\n        assets {\n          source\n        }\n        children {\n          id\n          name\n          assets {\n            source\n          }\n        }\n        productVariants(options: { take: 8 }) {\n          items {\n            product {\n              id\n              name\n              featuredAsset {\n                source\n              }\n              description\n              variants {\n                priceWithTax\n                stockLevel\n                sku\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetAllCollectionsDocument,
    "\n  query GetSimilarCollections($ep: String!) {\n    collections(options: { take: 1, filter: { id: { eq: $ep } } }) {\n      items {\n        id\n        name\n        assets {\n          source\n        }\n        productVariants(options: { take: 9 }) {\n          items {\n            product {\n              id\n              name\n              featuredAsset {\n                source\n              }\n              description\n              variants {\n                priceWithTax\n                stockLevel\n                sku\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetSimilarCollectionsDocument,
    "\n  query GetSliders {\n    collection(id: \"6\") {\n      productVariants(\n        options: { take: 5, filter: { name: { notContains: \"Balloon\" } } }\n      ) {\n        items {\n          product {\n            id\n            name\n            assets {\n              source\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetSlidersDocument,
    "\n  query GetBanner1 {\n    collection(id: \"4\") {\n      productVariants(options: { take: 9 }) {\n        items {\n          product {\n            id\n            name\n            featuredAsset {\n              source\n            }\n            description\n            variants {\n              priceWithTax\n              stockLevel\n              sku\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetBanner1Document,
    "\n  query GetBanner2 {\n    collection(id: \"8\") {\n      productVariants(options: { take: 9 }) {\n        items {\n          product {\n            id\n            name\n            featuredAsset {\n              source\n            }\n            description\n            variants {\n              priceWithTax\n              stockLevel\n              sku\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetBanner2Document,
    "\n  query GetBanner3 {\n    collection(id: \"5\") {\n      productVariants(options: { take: 9 }) {\n        items {\n          product {\n            id\n            name\n            featuredAsset {\n              source\n            }\n            description\n            variants {\n              priceWithTax\n              stockLevel\n              sku\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetBanner3Document,
    "\n  query GetProductList($id: String!) {\n    products(options: { take: 1, filter: { id: { eq: $id } } }) {\n      items {\n        id\n        name\n        featuredAsset {\n          source\n        }\n        description\n        variants {\n          priceWithTax\n          stockLevel\n          sku\n        }\n      }\n    }\n  }\n": types.GetProductListDocument,
    "\n  query Search($term: String!) {\n    search(input: { term: $term }) {\n      totalItems\n      items {\n        productId\n        productVariantId\n        productName\n        productAsset {\n          preview\n        }\n        priceWithTax {\n          ... on SinglePrice {\n            value\n          }\n        }\n        score\n      }\n    }\n  }\n": types.SearchDocument,
    "\n  query GetAllCustomer {\n    activeCustomer {\n      id\n      firstName\n      lastName\n      emailAddress\n      phoneNumber\n    }\n  }\n": types.GetAllCustomerDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Login($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      ... on CurrentUser {\n        id\n        identifier\n        channels {\n          token\n        }\n      }\n      ... on InvalidCredentialsError {\n        errorCode\n        message\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n      ... on ErrorResult {\n        errorCode\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Login($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      ... on CurrentUser {\n        id\n        identifier\n        channels {\n          token\n        }\n      }\n      ... on InvalidCredentialsError {\n        errorCode\n        message\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n      ... on ErrorResult {\n        errorCode\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Register(\n    $emailAddress: String!\n    $firstName: String!\n    $lastName: String!\n    $password: String!\n  ) {\n    registerCustomerAccount(\n      input: {\n        emailAddress: $emailAddress\n        firstName: $firstName\n        lastName: $lastName\n        password: $password\n      }\n    ) {\n      ... on Success {\n        success\n      }\n      ... on MissingPasswordError {\n        errorCode\n        message\n      }\n      ... on PasswordValidationError {\n        errorCode\n        message\n        validationErrorMessage\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Register(\n    $emailAddress: String!\n    $firstName: String!\n    $lastName: String!\n    $password: String!\n  ) {\n    registerCustomerAccount(\n      input: {\n        emailAddress: $emailAddress\n        firstName: $firstName\n        lastName: $lastName\n        password: $password\n      }\n    ) {\n      ... on Success {\n        success\n      }\n      ... on MissingPasswordError {\n        errorCode\n        message\n      }\n      ... on PasswordValidationError {\n        errorCode\n        message\n        validationErrorMessage\n      }\n      ... on NativeAuthStrategyError {\n        errorCode\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation VerifyCustomer($token: String!, $password: String) {\n  verifyCustomerAccount(token: $token, password: $password) {\n    ... on CurrentUser {\n      id\n      identifier\n      channels {\n        token\n      }\n    }\n    ... on VerificationTokenInvalidError {\n      errorCode\n      message\n    }\n    ... on VerificationTokenExpiredError {\n      errorCode\n      message\n    }\n    ... on MissingPasswordError {\n      errorCode\n      message\n    }\n    ... on PasswordValidationError {\n      errorCode\n      message\n    }\n    ... on PasswordAlreadySetError {\n      errorCode\n      message\n    }\n    ... on NativeAuthStrategyError {\n      errorCode\n      message\n    }\n  }\n}\n"): (typeof documents)["\nmutation VerifyCustomer($token: String!, $password: String) {\n  verifyCustomerAccount(token: $token, password: $password) {\n    ... on CurrentUser {\n      id\n      identifier\n      channels {\n        token\n      }\n    }\n    ... on VerificationTokenInvalidError {\n      errorCode\n      message\n    }\n    ... on VerificationTokenExpiredError {\n      errorCode\n      message\n    }\n    ... on MissingPasswordError {\n      errorCode\n      message\n    }\n    ... on PasswordValidationError {\n      errorCode\n      message\n    }\n    ... on PasswordAlreadySetError {\n      errorCode\n      message\n    }\n    ... on NativeAuthStrategyError {\n      errorCode\n      message\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ConvidadoOuLoginSuccess($id_: ID!, $quantity_: Int!) {\n    addItemToOrder(productVariantId: $id_, quantity: $quantity_) {\n      ... on Order {\n        id\n      }\n      ... on OrderModificationError {\n        errorCode\n        message\n      }\n      ... on OrderLimitError {\n        errorCode\n        message\n      }\n      ... on NegativeQuantityError {\n        errorCode\n        message\n      }\n      ... on InsufficientStockError {\n        errorCode\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ConvidadoOuLoginSuccess($id_: ID!, $quantity_: Int!) {\n    addItemToOrder(productVariantId: $id_, quantity: $quantity_) {\n      ... on Order {\n        id\n      }\n      ... on OrderModificationError {\n        errorCode\n        message\n      }\n      ... on OrderLimitError {\n        errorCode\n        message\n      }\n      ... on NegativeQuantityError {\n        errorCode\n        message\n      }\n      ... on InsufficientStockError {\n        errorCode\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Order {\n    activeOrder {\n      total\n      totalWithTax\n      taxSummary {\n        description\n        taxRate\n        taxBase\n        taxTotal\n      }\n      lines {\n        id\n        featuredAsset {\n          source\n        }\n        productVariant {\n          name\n          priceWithTax\n        }\n        proratedUnitPriceWithTax\n        discounts {\n          amountWithTax\n        }\n        unitPrice\n        quantity\n      }\n    }\n  }\n"): (typeof documents)["\n  query Order {\n    activeOrder {\n      total\n      totalWithTax\n      taxSummary {\n        description\n        taxRate\n        taxBase\n        taxTotal\n      }\n      lines {\n        id\n        featuredAsset {\n          source\n        }\n        productVariant {\n          name\n          priceWithTax\n        }\n        proratedUnitPriceWithTax\n        discounts {\n          amountWithTax\n        }\n        unitPrice\n        quantity\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation REMOVE_ORDER($id_: ID!) {\n    removeOrderLine(orderLineId: $id_) {\n      ... on Order {\n        id\n      }\n      ... on OrderModificationError {\n        errorCode\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation REMOVE_ORDER($id_: ID!) {\n    removeOrderLine(orderLineId: $id_) {\n      ... on Order {\n        id\n      }\n      ... on OrderModificationError {\n        errorCode\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ADJUST_ORDER($id_: ID!, $quantity_: Int!) {\n    adjustOrderLine(orderLineId: $id_, quantity: $quantity_) {\n      ... on Order {\n        id\n      }\n      ... on OrderModificationError {\n        errorCode\n        message\n      }\n      ... on OrderLimitError {\n        errorCode\n        message\n      }\n      ... on NegativeQuantityError {\n        errorCode\n        message\n      }\n      ... on InsufficientStockError {\n        errorCode\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ADJUST_ORDER($id_: ID!, $quantity_: Int!) {\n    adjustOrderLine(orderLineId: $id_, quantity: $quantity_) {\n      ... on Order {\n        id\n      }\n      ... on OrderModificationError {\n        errorCode\n        message\n      }\n      ... on OrderLimitError {\n        errorCode\n        message\n      }\n      ... on NegativeQuantityError {\n        errorCode\n        message\n      }\n      ... on InsufficientStockError {\n        errorCode\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation REMOVE_ALL_ORDER {\n    removeAllOrderLines {\n      ... on Order {\n        id\n      }\n      ... on OrderModificationError {\n        errorCode\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation REMOVE_ALL_ORDER {\n    removeAllOrderLines {\n      ... on Order {\n        id\n      }\n      ... on OrderModificationError {\n        errorCode\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllCollections {\n    collections(options: { take: 9 }) {\n      items {\n        id\n        name\n        assets {\n          source\n        }\n        children {\n          id\n          name\n          assets {\n            source\n          }\n        }\n        productVariants(options: { take: 8 }) {\n          items {\n            product {\n              id\n              name\n              featuredAsset {\n                source\n              }\n              description\n              variants {\n                priceWithTax\n                stockLevel\n                sku\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAllCollections {\n    collections(options: { take: 9 }) {\n      items {\n        id\n        name\n        assets {\n          source\n        }\n        children {\n          id\n          name\n          assets {\n            source\n          }\n        }\n        productVariants(options: { take: 8 }) {\n          items {\n            product {\n              id\n              name\n              featuredAsset {\n                source\n              }\n              description\n              variants {\n                priceWithTax\n                stockLevel\n                sku\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSimilarCollections($ep: String!) {\n    collections(options: { take: 1, filter: { id: { eq: $ep } } }) {\n      items {\n        id\n        name\n        assets {\n          source\n        }\n        productVariants(options: { take: 9 }) {\n          items {\n            product {\n              id\n              name\n              featuredAsset {\n                source\n              }\n              description\n              variants {\n                priceWithTax\n                stockLevel\n                sku\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSimilarCollections($ep: String!) {\n    collections(options: { take: 1, filter: { id: { eq: $ep } } }) {\n      items {\n        id\n        name\n        assets {\n          source\n        }\n        productVariants(options: { take: 9 }) {\n          items {\n            product {\n              id\n              name\n              featuredAsset {\n                source\n              }\n              description\n              variants {\n                priceWithTax\n                stockLevel\n                sku\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSliders {\n    collection(id: \"6\") {\n      productVariants(\n        options: { take: 5, filter: { name: { notContains: \"Balloon\" } } }\n      ) {\n        items {\n          product {\n            id\n            name\n            assets {\n              source\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSliders {\n    collection(id: \"6\") {\n      productVariants(\n        options: { take: 5, filter: { name: { notContains: \"Balloon\" } } }\n      ) {\n        items {\n          product {\n            id\n            name\n            assets {\n              source\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetBanner1 {\n    collection(id: \"4\") {\n      productVariants(options: { take: 9 }) {\n        items {\n          product {\n            id\n            name\n            featuredAsset {\n              source\n            }\n            description\n            variants {\n              priceWithTax\n              stockLevel\n              sku\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetBanner1 {\n    collection(id: \"4\") {\n      productVariants(options: { take: 9 }) {\n        items {\n          product {\n            id\n            name\n            featuredAsset {\n              source\n            }\n            description\n            variants {\n              priceWithTax\n              stockLevel\n              sku\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetBanner2 {\n    collection(id: \"8\") {\n      productVariants(options: { take: 9 }) {\n        items {\n          product {\n            id\n            name\n            featuredAsset {\n              source\n            }\n            description\n            variants {\n              priceWithTax\n              stockLevel\n              sku\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetBanner2 {\n    collection(id: \"8\") {\n      productVariants(options: { take: 9 }) {\n        items {\n          product {\n            id\n            name\n            featuredAsset {\n              source\n            }\n            description\n            variants {\n              priceWithTax\n              stockLevel\n              sku\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetBanner3 {\n    collection(id: \"5\") {\n      productVariants(options: { take: 9 }) {\n        items {\n          product {\n            id\n            name\n            featuredAsset {\n              source\n            }\n            description\n            variants {\n              priceWithTax\n              stockLevel\n              sku\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetBanner3 {\n    collection(id: \"5\") {\n      productVariants(options: { take: 9 }) {\n        items {\n          product {\n            id\n            name\n            featuredAsset {\n              source\n            }\n            description\n            variants {\n              priceWithTax\n              stockLevel\n              sku\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProductList($id: String!) {\n    products(options: { take: 1, filter: { id: { eq: $id } } }) {\n      items {\n        id\n        name\n        featuredAsset {\n          source\n        }\n        description\n        variants {\n          priceWithTax\n          stockLevel\n          sku\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProductList($id: String!) {\n    products(options: { take: 1, filter: { id: { eq: $id } } }) {\n      items {\n        id\n        name\n        featuredAsset {\n          source\n        }\n        description\n        variants {\n          priceWithTax\n          stockLevel\n          sku\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Search($term: String!) {\n    search(input: { term: $term }) {\n      totalItems\n      items {\n        productId\n        productVariantId\n        productName\n        productAsset {\n          preview\n        }\n        priceWithTax {\n          ... on SinglePrice {\n            value\n          }\n        }\n        score\n      }\n    }\n  }\n"): (typeof documents)["\n  query Search($term: String!) {\n    search(input: { term: $term }) {\n      totalItems\n      items {\n        productId\n        productVariantId\n        productName\n        productAsset {\n          preview\n        }\n        priceWithTax {\n          ... on SinglePrice {\n            value\n          }\n        }\n        score\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllCustomer {\n    activeCustomer {\n      id\n      firstName\n      lastName\n      emailAddress\n      phoneNumber\n    }\n  }\n"): (typeof documents)["\n  query GetAllCustomer {\n    activeCustomer {\n      id\n      firstName\n      lastName\n      emailAddress\n      phoneNumber\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;